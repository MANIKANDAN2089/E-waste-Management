{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MANIKANDAN\\\\Downloads\\\\fullstack-ewaste-project\\\\frontend\\\\src\\\\pages\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nexport default function Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const sendMessage = async e => {\n    e.preventDefault();\n    if (!input.trim()) return;\n    const userMessage = input.trim();\n    setInput('');\n    setLoading(true);\n    setMessages(prev => [...prev, {\n      text: userMessage,\n      sender: 'user'\n    }]);\n    try {\n      const res = await fetch(`${API}/chatbot/query`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: userMessage\n        })\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setMessages(prev => [...prev, {\n          text: data.answer,\n          sender: 'bot',\n          confidence: data.confidence,\n          matchedQuestion: data.matchedQuestion\n        }]);\n      } else {\n        throw new Error(data.error);\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, {\n        text: \"Sorry, I'm having trouble understanding that right now.\",\n        sender: 'bot',\n        error: true\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"E-Waste AI Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Powered by Google Gemini AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender} ${msg.source || ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-text\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), msg.source && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-meta\",\n          children: [\"Source: \", msg.source === 'gemini' ? 'AI' : 'Knowledge Base', msg.confidence && ` • Confidence: ${(msg.confidence * 100).toFixed(1)}%`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message bot\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 28\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask me anything about e-waste...\",\n        disabled: loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Chatbot, \"Dj2Fwf2x2Jq+kEf3LQn5UijOKhw=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","API","process","env","REACT_APP_API_URL","Chatbot","_s","messages","setMessages","input","setInput","loading","setLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","sendMessage","e","preventDefault","trim","userMessage","prev","text","sender","res","fetch","method","headers","body","JSON","stringify","question","data","json","ok","answer","confidence","matchedQuestion","Error","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","idx","source","toFixed","ref","onSubmit","value","onChange","target","placeholder","disabled","type","_c","$RefreshReg$"],"sources":["C:/Users/MANIKANDAN/Downloads/fullstack-ewaste-project/frontend/src/pages/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst API = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nexport default function Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n\r\n    const userMessage = input.trim();\r\n    setInput('');\r\n    setLoading(true);\r\n    \r\n    setMessages(prev => [...prev, { text: userMessage, sender: 'user' }]);\r\n\r\n    try {\r\n      const res = await fetch(`${API}/chatbot/query`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ question: userMessage })\r\n      });\r\n      \r\n      const data = await res.json();\r\n      if (res.ok) {\r\n        setMessages(prev => [...prev, {\r\n          text: data.answer,\r\n          sender: 'bot',\r\n          confidence: data.confidence,\r\n          matchedQuestion: data.matchedQuestion\r\n        }]);\r\n      } else {\r\n        throw new Error(data.error);\r\n      }\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, {\r\n        text: \"Sorry, I'm having trouble understanding that right now.\",\r\n        sender: 'bot',\r\n        error: true\r\n      }]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chat-header\">\r\n        <h2>E-Waste AI Assistant</h2>\r\n        <p>Powered by Google Gemini AI</p>\r\n      </div>\r\n      <div className=\"chat-messages\">\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} className={`message ${msg.sender} ${msg.source || ''}`}>\r\n            <div className=\"message-text\">{msg.text}</div>\r\n            {msg.source && (\r\n              <div className=\"message-meta\">\r\n                Source: {msg.source === 'gemini' ? 'AI' : 'Knowledge Base'}\r\n                {msg.confidence && ` • Confidence: ${(msg.confidence * 100).toFixed(1)}%`}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n        {loading && (\r\n          <div className=\"message bot\">\r\n            <div className=\"typing-indicator\">\r\n              <span></span><span></span><span></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <form onSubmit={sendMessage} className=\"chat-input\">\r\n        <input\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Ask me anything about e-waste...\"\r\n          disabled={loading}\r\n        />\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? 'Sending...' : 'Send'}\r\n        </button>\r\n        \r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}